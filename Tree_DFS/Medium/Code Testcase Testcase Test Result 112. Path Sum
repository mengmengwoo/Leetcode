# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:
        # Time: O(n), Space: O(n) --> very unbalance tree or O(logn)-->balance tree
        def dfs(node, curSum):
            if not node:
                return False
            curSum +=node.val
            # when it is the leaf node, return True or False if it is the targetSum
            if not node.left and not node.right:
                return curSum == targetSum
            # Return True if either the left node or the right node is True
            return (dfs(node.left, curSum) or dfs(node.right,curSum))
        return dfs(root,0)
